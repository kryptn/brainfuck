example use:


kryptn:~/python/brainfuck$ python -i brainfuck.py
>>> hw
'++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.'
>>> x = Brainfuck(hw, verbose=2, logTo='hw.log')
>>> x.compile()
Hello World!




Help on class Brainfuck in module __main__:

class Brainfuck(__builtin__.object)
 |  Methods defined here:
 |
 |  __init__(self, code=None, verbose=0, step=0, inFile=None, logTo=None)
 |      make the class and initialize the values used.
 |
 |      code: string/list of code
 |      verbose: uses debugger on every step, see self.debug
 |      step: interval between debug outputs
 |      inFile: file name to read code from
 |      logTo: file to send output to
 |
 |      use:
 |              x = Brainfuck(code)
 |              x = Brainfuck(f='bf.b')
 |              x = Brainfuck(code, verbose=6)
 |              x = Brainfuck(f='bf.bf', verbose=2)
 |
 |              x = Brainfuck(f='bf.bf', logTo='bf.log', verbose=2)
 |
 |              recommended with debugger use.
 |              x.clean()
 |
 |              x.compile()
 |
 |  begin(self)
 |      matches opening bracket.
 |
 |  clean(self)
 |      removes all non-brainfuck commands.
 |
 |  compile(self)
 |      matches symbols to the handlers until it reaches the end of the code.
 |
 |      if logTo is set, it prints the debugStack to the file, as well as the
 |      code output.
 |
 |  debug(self)
 |      prints verbose information to the screen.
 |
 |      verbose=2 : shows code progression (really cool)
 |      verbose=3 : shows array values     (awesome to debug with)
 |      verbose=6 : shows both 2 and 3, one on each line
 |
 |      if logTo is set, it won't print to the screen, but to the file.
 |      if not set, it'll sleep on every step, which may lock up the
 |      python process itself until it's done.
 |
 |  decrement(self)
 |      subtracts one from cell value
 |
 |  end(self)
 |      matches end bracket.
 |
 |  find(self, ptr, direction)
 |      finds the matching bracket in either given direction
 |
 |  increment(self)
 |      adds one to cell value
 |
 |  input(self)
 |      takes input from cli.  needs work.
 |
 |  left(self)
 |      shifts current position to the left by one
 |
 |  output(self)
 |      outputs to a list, printed at the end. needs work.
 |
 |  right(self)
 |      shifts to the right

